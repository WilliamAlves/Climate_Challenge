*** What is the O() complexity of your solution?
	- O(n). The Max and Min functions have O(log n) complexity, while checkBST_Aux
	recursively acts on all of the elements of the input, checking if the values are in
	the correct range for the tree to be a BST - that is, checkBST_Aux has linear complexity.
	Therefore, O(2 log n + n) -> O (n).

*** How can you improve your existing solution? If that is possible, what would your new solution's O() complexity be?
	- The problem tells us that the input is between 0 and 1000. We could, then, set these values as the
	minimum and maximum in the first call of CheckBST_Aux, and eliminate the Min and Max functions
	(reducing the number of operations). However, the complexity would remain O(n), since the 
	complexity bottleneck is in checkBST_AUX, not in the Min and Max functions.

*** What is the complexity class  (P, NP, NP-complete, etc) of this problem?
	- P (for time and space), because it's a simple decision algorithm ("Is it a BST? Yes or No?"),
	whose solution is given in linear time, consuming in the worst case (a totally unbalanced tree) N space.


------------------------------------------------------------------------------------------

*** Qual a complexidade O() do algoritimo?
	- O(n). As funcoes Max e Min tem complexidade O(log n), enquanto checkBST_Aux
	recursivamente atua sobre todos os elementos da entrada, para verificar se 
	os valores estao no intervalo correto para a arvore ser binaria de busca - ou seja,
	tem	complexidade linear. Logo, O(2 log n + n) -> O(n).

*** Eh possivel melhorar o algoritimo? Se sim, qual a nova complexidade?
	- Sim. Como o problema nos diz que a entrada esta entre 0 e 1000, poderiamos definir
	esses valores como o minimo e maximo na primira chamada de CheckBST_Aux e eliminar
	as funcoes Min e Max, reduzindo o numero de operacoes. Porem, como o gargalo de 
	complexidade esta em checkBST_AUX (para afirmarmos que a arvore eh ou nao BST 
	temos que verificar todos os valores), a complexidade seguiria sendo O(n).


*** Qual a classe de complexidade do algoritimo?
	- P (tempo e espaco), pois trata-se de um simples algoritimo de decisao
	("a arvore eh BST? sim ou nao?") cuja solucao eh dada em tempo linear,
	consumindo no pior caso (onde a arvore eh totalmente desbalanceada)
	espaco (devido a pilha de memoria, por causa da recursao) igual a N.
